<div id="scrollbox">
    @if (connecting)
    {
        <div class="card mb-3 text-white bg-warning">
            <div class="card-body">
                <h5 class="card-title mb-0">Connecting...</h5>
            </div>
        </div>
    }
    @foreach (var item in messages)
    {
        <div class="card mb-3 text-white @item.CSS">
            <div class="card-header p-1 clearfix">
                <span>@item.Username</span>
                <span class="text-white-50 float-right">@item.Time</span>
                @if (item.WaitingConfirmation)
                {
                    <div class="spinner-grow spinner-grow-sm text-light float-right" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
            <div class="card-body p-1">@((MarkupString)item.Body.Replace("\n", "<br />"))</div>
        </div>
    }
    <hr />
    <div class="input-group">
        <input class="form-control" @bind="newMessage" @onkeyup="InputKeyPress" />
        <div class="input-group-append">
            <button class="col btn btn-primary" @onclick="@SendAsync">Send</button>
        </div>
    </div>
</div>

@implements IDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Threading; 

@code {
    [Parameter]
    public string SiteUrl { get; set; }

    [Parameter]
    public string HubPath { get; set; } = "/ChatHub";

    [Parameter]
    public string Username { get; set; }

    [Parameter]
    public string AccessToken { get; set; }

    private List<Message> messages = new List<Message>();

    private string newMessage;

    private HubConnection hubConnection = null;

    private bool connecting = false;

    public async Task Connect()
    {
        if (hubConnection != null)
        {
            await Disconnect();
        }

        hubConnection = new HubConnectionBuilder()
            .WithAutomaticReconnect()
            .WithUrl($"{SiteUrl.TrimEnd('/')}{HubPath}", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(AccessToken);
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", ReceiveMessage);

        hubConnection.On<Guid>("MessageConfirmation", ConfirmMessage);

        hubConnection.Closed += (Exception e) =>
        {
            messages.Add(new Message
            {
                Username = "KubeChat",
                Body = $"Connection closed\n{e.Message}",
                CSS = "bg-info"
            });
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Reconnecting += (Exception e) =>
        {
            messages.Add(new Message
            {
                Username = "KubeChat",
                Body = $"Reconnecting\n{e.Message}",
                CSS = "bg-info"
            });
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (string s) =>
        {
            messages.Add(new Message
            {
                Username = "KubeChat",
                Body = $"Reconnected\n{s}",
                CSS = "bg-info"
            });
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        try
        {
            connecting = true;

            new Thread(ConnectingMessageThread).Start();
            await hubConnection.StartAsync();

            connecting = false;
            StateHasChanged();

            await hubConnection.SendAsync("Register", Username);
        }
        catch (Exception e)
        {
            connecting = false;
            messages.Add(new Message
            {
                Username = "KubeChat",
                Body = $"Failed to connect.\n{e.Message}",
                CSS = "bg-danger"
            });
            StateHasChanged();
            hubConnection = null;
        }
    }

    public async Task Disconnect()
    {
        if (hubConnection == null)
        {
            return;
        }

        try
        {
            await hubConnection.StopAsync();
        }
        finally
        {
            await hubConnection.DisposeAsync();
        }

        hubConnection = null;
    }

    public void Dispose()
    {
        Disconnect().Wait();
    }

    private async Task InputKeyPress(KeyboardEventArgs args)
    {
        if (!args.ShiftKey && args.Key == "Enter")
        {
            await SendAsync();
        }
    }

    private async Task SendAsync()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            var message = new Message
            {
                Guid = Guid.NewGuid(),
                Username = Username,
                Body = newMessage,
                CSS = "bg-success",
                WaitingConfirmation = true
            };

            messages.Add(message);

            newMessage = "";

            StateHasChanged();

            if (hubConnection == null || hubConnection.State == HubConnectionState.Disconnected)
            {
                await Connect();
            }

            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("SendMessage", message.Guid, message.Body);
            }
        }
    }

    private void ReceiveMessage(string username, string body)
    {
        messages.Add(new Message
        {
            Username = username,
            Body = body,
            CSS = "bg-primary",
            WaitingConfirmation = false
        });

        StateHasChanged();
    }

    private void ConfirmMessage(Guid guid)
    {
        var message = messages
            .Where(m =>
                m.WaitingConfirmation == true &&
                m.Guid == guid)
            .SingleOrDefault();

        if (message != null)
        {
            message.WaitingConfirmation = false;
            message.Time = DateTime.Now;
        }

        StateHasChanged();
    }

    private void ConnectingMessageThread()
    {
        Thread.Sleep(3000);
        int i = 3000;

        while (connecting && i < 10000)
        {
            InvokeAsync(StateHasChanged);
            Thread.Sleep(100);
            i += 100;
        }

        if (connecting)
        {
            messages.Add(new Message
            {
                Username = "KubeChat",
                Body = $"Timed out while connecting.",
                CSS = "bg-danger"
            });
            connecting = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private class Message
    {
        public string Username { get; set; }
        public string Body { get; set; }
        public bool WaitingConfirmation { get; set; }
        public Guid Guid { get; set; } = Guid.Empty;
        public DateTime Time { get; set; } = DateTime.Now;
        public string CSS { get; set; }
    }
}
